<pre class='metadata'>
Title: Linked Data Event Streams Vocabulary
Shortname: LDES Vocabulary
Level: 1
Status: LS
URL: https://w3id.org/ldes
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Repository: https://github.com/SEMICeu/LinkedDataEventStreams
Abstract:  This document defines the Linked Data Event Streams (LDES) Vocabulary, which provides terms for describing append-only, immutable collections of events as Linked Data. The vocabulary extends existing standards such as the TREE and DCAT vocabularies to support event streams, versioning, retention policies, and transactional semantics.
</pre>

# Vocabulary # {#vocabulary}

Next to re-using terms from the `tree:` vocabulary, the `ldes:` namespace introduced in this document provides a couple of new terms.
The base IRI for LDES is `https://w3id.org/ldes#`, and the preferred prefix is `ldes:`.
There is a Turtle version available at [https://w3id.org/ldes#Vocabulary](https://w3id.org/ldes).

## ldes:EventStream ## {#EventStream}

The class `ldes:EventStream` is a subclass of `tree:Collection`. The specialization being that all members are immutable, and thus that this `tree:Collection` is append-only.

## ldes:timestampPath ## {#timestampPath}

The path to the `xsd:dateTime` literal in each member that defines the order of the event stream.

**Domain:** `ldes:EventStream`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)

## ldes:sequencePath ## {#sequencePath}

The path to an xsd literal in each member that defines the order of the event stream in addition to the `ldes:timestampPath`.

**Domain:** `ldes:EventStream`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)


## ldes:versionOfPath ## {#versionOfPath}

The path to the IRI in each member that defines the entity of which this member is a version.

**Domain:** `ldes:EventStream`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)


## ldes:versionTimestampPath ## {#versionTimestampPath}

For out of order event streams, this defines the path to the `xsd:dateTime` literal in each member that defines the order of versioned members.

Only relevant when the `ldes:versionOfPath` has been set.

**Domain:** `ldes:EventStream`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)

## ldes:versionSequencePath ## {#versionSequencePath}

For out of order event streams, this defines the path to an xsd literal in each member that defines the order of the event stream in addition to the `ldes:versionTimestampPath`.

**Domain:** `ldes:EventStream`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)

## ldes:EventSource ## {#EventSource}

The class `ldes:EventSource` is a subclass of `dcat:Distribution`, the specialization being that this is a feed that uses a chronological search tree to make available a Linked Data Event Stream in order.

An `ldes:EventSource` can *only* be published on LDESs that have a `ldes:timestampPath` set, and thus will publish their entities in this chronological order.

## ldes:retentionPolicy ## {#retentionPolicy}

Links to a retention policy.

**Domain:** Preferably the root node. Alternatively it can occur on any type of entity that is linked from the root node using `tree:viewDescription`.

**Range:** `ldes:RetentionPolicy`

## ldes:RetentionPolicy ## {#RetentionPolicy}

The class for a retention policy that indicates how long members are preserved in this search tree.

### ldes:startingFrom ### {#startingFrom}

The search tree only keeps members starting a certain timestamp.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:dateTime` with a timezone

### ldes:versionDuration ### {#versionDuration}

The search tree only keeps its versions, for which an `ldes:versionAmount` MUST have been set, only during a specific window. 

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`

### ldes:versionAmount ### {#versionAmount}

The number of versions to keep. This MUST be a number greater than 0.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:integer` > 0

### ldes:versionDeleteDuration ### {#versionDeleteDuration}

The search tree only keeps its deletions for a certain duration.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`

### ldes:fullLogDuration ### {#fullLogDuration}

The search tree keeps its full log for a certain duration.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`

### Former retention policies terms ### {#former-retentionpolicies}

 * `ldes:DurationAgoPolicy`: A retention policy class that uses an `xsd:duration` literal to document a sliding window of data.
 * `ldes:LatestVersionSubset`: A retention policy class that select an amount of versions based on the versionOfPath.
 * `ldes:amount`: The number of versions to keep. This MUST be a number greater than 0.
     - Domain: `ldes:LatestVersionSubset`
     - Range: `xsd:integer`
 * `ldes:PointInTimePolicy`: A retention policy class that indicates members are kept starting on a certain point in time.
 * `ldes:pointInTime: The point in time from which members will be available starting from this root node.
     - Domain: `ldes:PointInTimePolicy`
     - Range: `xsd:dateTime` including an explicit timezone

## Terms for versioning and transactions on top of ldes:EventStream ## {#versioning-transactions}

### ldes:versionCreatePath ### {#versionCreatePath}

Path indicating where you can do an object check on whether the member represents a create. Defaults to rdf:type.

### ldes:versionUpdatePath ### {#versionUpdatePath}

Path indicating where you can do an object check on whether the member represents an update. Defaults to rdf:type.

### ldes:versionDeletePath ### {#versionDeletePath}

Path indicating where you can do an object check on whether the member represents a delete. Defaults to rdf:type.

### ldes:versionCreateObject ### {#versionCreateObject}

If the RDF object matches the object in the version create path, the member represents a create.

### ldes:versionUpdateObject ### {#versionUpdateObject}

If the RDF object matches the object in the version update path, the member represents an update.

### ldes:versionDeleteObject ### {#versionDeleteObject}

If the RDF object matches the object in the version delete path, the member represents a delete.

### ldes:transactionPath ### {#transactionPath}

Path indicating how a member indicates whether it is part of a transaction.

### ldes:transactionFinalizedPath ### {#transactionFinalizedPath}

Path indicating whether the transaction has been finalized.

### ldes:transactionFinalizedObject ### {#transactionFinalizedObject}

If the RDF object matches the object in the transaction finalized path, the member indicates the transaction has been finalized.
