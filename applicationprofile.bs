<pre class='metadata'>
Title: LDES Application Profile
Shortname: LDES-AP
Level: 1
Status: LS
URL: https://w3id.org/ldes/specification/ap
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Repository: https://github.com/SEMICeu/LinkedDataEventStreams
Abstract: An application profile for the root node and subsequent nodes publishing an LDES.
</pre>

# Introduction # {#introduction}

This specification is the application profile that allows you to validate an implementation of a root node and any subsequent node.
It is also available as [[!SHACL]] shapes (link: todo).

TODO: UML image

# Root Node # {#rootnode}

A root node MUST link the event stream to the view using the `tree:view` property.

A root node MUST contain context information about the LDES. All these properties in the domain of the event stream have a cardinality of 0 or 1:
- `ldes:timestampPath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:sequencePath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionOfPath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionTimestampPath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionSequencePath` : points to a SHACL property path (an rdf:List or an IRI)
- `tree:shape`: point to a `sh:NodeShape`.
- `ldes:versionCreatePath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionUpdatePath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionDeletePath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:versionCreateObject`
- `ldes:versionUpdateObject`
- `ldes:versionDeleteObject`
- `ldes:transactionPath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:transactionFinalizedPath`: points to a SHACL property path (an rdf:List or an IRI)
- `ldes:transactionFinalizedObject`

A root node MUST contain context information about this particular entry point:
- `ldes:retentionPolicy` 0 or 1. Although in older versions of the spec multiple were allowed.
- `tree:viewDescription` 0 or 1.

## Retention policies ## {#retention-policies}

A root node MUST contain at most one `ldes:retentionPolicy` property (cardinality: 0..1).  
The value of `ldes:retentionPolicy` MUST be an IRI referring to a retention policy description.

A retention policy description MAY contain the following properties, each with cardinality 0 or 1:

- `ldes:startingFrom` (0..1) If present, this property MUST be a `xsd:dateTime` literal indicating the earliest timestamp for retained members.

- `ldes:fullLogDuration` (0..1) If present, this property MUST be a duration literal specifying the time window for which all members are retained.

- `ldes:versionAmount` (0..1) If present, this property MUST be an integer literal specifying the number of versions to retain per entity.

- `ldes:versionDuration` (0..1) If present, this property MUST be a duration literal specifying the time window for which versions are retained.

- `ldes:versionDeleteDuration` (0..1) If present, this property MUST be a duration literal specifying the time window for which deletions are retained.

# Root node and subsequent nodes # {#nodes}

On the event stream, 0 or more `tree:member` triples are provided. The objects MUST be IRIs.

A `tree:view` triple MAY be present on the event stream to the current page `<>`.

A current page `<>` has 0 or more `tree:relation` properties to relations.

This page MAY also have a `ldes:immutable` set to `true` attached to it.
The default value is false. If it is not immutable, this SHOULD NOT be made explicit using a `false` value.

## Relations ## {#relations}

Relations in LDES are used to describe how pages or nodes are connected within the event stream. Each relation is represented using the `tree:relation` property and SHOULD specify its type and relevant properties.

On all relations, exactly one `tree:node` MUST be present. The object MUST be an IRI.

In case it is typed a `tree:GreaterThanRelation`, `tree:LessThanRelation`, `tree:EqualToRelation`, `tree:LessThanOrEqualToRelation`, or `tree:GreaterThanOrEqualToRelation`, each of these relations MUST specify exactly one `tree:path` (a [[!SHACL]] path) and `tree:value`.