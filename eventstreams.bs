<pre class='metadata'>
Title: Linked Data Event Streams
Shortname: LDES
Level: 1
Status: LS
URL: https://w3id.org/ldes/specification
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Repository: https://github.com/SEMICeu/LinkedDataEventStreams
Abstract: A Linked Data Event Stream (LDES) is an append-only collection of members described using the Resource Description Framework (RDF). The specification explains how a client can replicate the history of an event stream, and how it can then remain synchronized as new members are published.
</pre>

# Introduction # {#introduction}

An **LDES client** is a piece of software used by a *consumer* that accepts the URL to an entry point, and returns a stream of members of the corresponding `ldes:EventStream`.
The data stream emits the history that is available from this entry point, and once the consumer has caught up with the stream, it remains synchronized as new members are published.

The client does this by extending upon a subset of [the W3C TREE hypermedia specification](https://w3id.org/tree/specification).
The *extension* is that the Linked Data Event Streams specification introduces specialized terms for dealing with append-only collections, or *event streams*.
For example, one can indicate what time-based property in the member is used for indicating the order of the event stream, indicate the retention policy as a promise from the producer to the consumer, or detail how to deal with version-based members.

Issue: More extensions should be specified w.r.t. [HTTP status codes](https://github.com/SEMICeu/LinkedDataEventStreams/issues/69), or [keeping state](https://github.com/SEMICeu/LinkedDataEventStreams/issues/31). This should be further detailled in a chapter after the overview.

# Overview # {#overview}

<img height="500" src="overview.svg" alt="An overview of the LDES specification.">

A Linked Data Event Stream (LDES) (`ldes:EventStream`) is a collection (`rdfs:subClassOf tree:Collection`) of members that cannot be updated or removed once they are published, with each member being a set of RDF quads ([[!rdf-primer]]).
This way, the collection of members becomes an append-only log or *event stream*.

Following the [TREE specification](https://w3id.org/tree/specification), this event stream is published using one or more HTTP resources.
When more resources are used, these pages, or `tree:Node`s will be structured according to a search tree.
Therefore we will use the terms *root node* for the first page, and *subsequent node* for every next page in the structure.

In the root node, the client will expect these properties to be described on the `ldes:EventStream` entity:
 * `ldes:timestampPath`: this is a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths) that identifies an `xsd:dateTime` literal within each member. This timestamp determines the order in which members of the event stream are published. When `ldes:timestampPath` is set, no member can be added to the LDES with a timestamp earlier than the latest published member.
 * `ldes:versionOfPath`: when your entities are versioned, this property points at the object that tells you what is is a version of (e.g., `dcterms:isVersionOf`).
 * `tree:shape`: a [[!SHACL]] shape that can be used for selection a search tree in the discovery phase, as well as to validate the members in the event stream.
 * `tree:view`: connects the collection to the current page, or points to one specific root node after dereferencing the `ldes:EventStream` identifier.

In the root node, the current node identified by the URL of the page (a provider can achieve this simply by using a relative IRI `<>`) will be further described using these properties:
 * `ldes:retentionPolicy`: indicates a retention policy (see next the dedicated chapter [](#retention)).
 * `tree:viewDescription`: can as well contain the retention policy, or other context data about this view of the LDES (e.g., the `dcat:Distribution`, the `tree:SearchTree`, or the `ldes:EventSource`) as a named entity. This is useful for example if a producer would like to disambiguate the IRI for the `ldes:EventSource` from the root `tree:Node`. By default, the `tree:viewDescription` points at the root node.

The client MUST implement the [initialization of the TREE specification](https://w3id.org/tree/specification#init), although it is not required to extract the `tree:search` form.

In any `tree:Node` – root node or subsequent node – the client expects to find 0 or more members of the `ldes:EventStream` using the `tree:member` property.
The subject is the event stream instance, and the object is the root focus node of a member.
An LDES client MUST implement the [Member Extraction Algorithm of the TREE specification](https://w3id.org/tree/specification#member-extraction-algorithm) to retrieve the full set of quads of the member.
In an `ldes:EventStream`, the object of the `tree:member` triple can only be an IRI as this IRI will be used in the state to check whether the member has already been emitted or not.

<div class="example" highlight="turtle">
An example record from a sensor observation dataset in the [[!turtle]] format:
```turtle
ex:Observations a ldes:EventStream ;
                ldes:timestampPath sosa:resultTime ;
                tree:shape ex:shape1.shacl ;
                tree:view <> ;
                tree:member ex:Observation1 .

ex:Observation1 a sosa:Observation ;
                sosa:resultTime "2026-01-01T00:00:00Z"^^xsd:dateTime ;
                sosa:hasSimpleResult "..." .
```
</div>

<div class="example" highlight="turtle">
An example record from a base registry of addresses in the [[!turtle]] format:
```turtle
ex:AddressRecords a ldes:EventStream ;
                  ldes:timestampPath dcterms:created ;
                  ldes:versionOfPath dcterms:isVersionOf ;
                  tree:shape ex:shape2.shacl ;
                  tree:view <> ;
                  tree:member ex:AddressRecord1-activity1 .

ex:AddressRecord1-activity1 dcterms:created "2026-01-01T00:00:00Z"^^xsd:dateTime ;
                           adms:versionNotes "First version of this address" ;
                           dcterms:isVersionOf ex:AddressRecord1 .
                           
 ex:AddressRecord1-activity1 {
    ex:AddressRecord1 dcterms:title "Streetname X, ZIP Municipality, Country" .
}
```
</div>

In any `tree:Node`, root node or subsequent node, the client expects to find zero or more `tree:relation` properties, containing a description of the `tree:Relation`s from this node to subsequent nodes.
A client MUST traverse the relations cfr. the TREE chapters on [traversing the search tree](https://w3id.org/tree/specification#traversing).
A client MUST keep its own *state* to know when to refetch certain `tree:Node`s.

Issue: We should refer here to a new next chapter on how to gracefully iterate over the pages and how to keep the state in more detail cfr. the extensions in Issue 1. We can then also indicate that a client MAY implement the text on [pruning branches](https://w3id.org/tree/specification#relationsubclasses) related to interpreting comparators for `xsd:dateTime` literals if it wants to detect immutable pages via the timestampPath.

Issue: More specific server documentation should be found in a Server Primer (to do), such as containing a [link to the JSON-LD context](https://github.com/SEMICeu/LinkedDataEventStreams/issues/59), [official SHACL shapes for LDES](https://github.com/SEMICeu/LinkedDataEventStreams/issues/70) to validate your pages, best practices for publishing an LDES for reaching an optimal performance, best practices for enveloping your data using named graphs, how to build a status log for the use case of an aggregator or harvester, etc.

# Retention policies # {#retention}

The goal of a retention policy is to indicate that, a client cannot rely on finding members that fall outside the retention policies.
This can help a consumer in the discovery phase to pick the right LDES, or help the consumer to detect non-viable synchronization set-ups.

When no retention policy is provided in the root node, the consumer MUST assume that all members, that have once been added to the `ldes:EventStream`, are still available from this root node.
When a retention policy is provided however, a consumer MUST assume it will not be able to find members outside of the retention policy.

<img width="100%" src="retentionpolicies.svg" alt="An overview of the existing retention policies in LDES">

<div class="example" highlight="turtle">
An example retention policy combining the features
```turtle
ex:LDES a ldes:EventStream ;
        ldes:timestampPath as:updated ;
		ldes:transactionPath ex:transactionId ;
		ldes:transactionFinalizedPath ex:transactionEnded ;
		ldes:transactionFinalizedObject true ;
        ldes:versionOfPath as:object ;
        ldes:versionDeleteObject as:Delete ;
        ldes:versionCreateObject as:Create ;
        ldes:versionUpdateObject as:Update ;
        tree:view <> .

<> a ldes:EventSource ;
     ldes:retentionPolicy [
     ldes:startingFrom "t_pointInTime"^^xsd:dateTime ;
     ldes:fullLogDuration "P1Y"^^xsd:duration ;
     ldes:versionAmount 1 ;
     ldes:versionDeleteDuration "P1Y"^^xsd:duration ;
] .
```
</div>

TODO: explain how a consumer MUST interpret the retention policy.

# Vocabulary # {#vocabulary}

Next to re-using terms from the `tree:` vocabulary, the `ldes:` namespace introduced in this document provides a couple of new terms.
The base IRI for LDES is `https://w3id.org/ldes#`, and the preferred prefix is `ldes:`.
There is a Turtle version available at [https://w3id.org/ldes#Vocabulary](https://w3id.org/ldes)

## ldes:EventStream ## {#voc-eventstream}

The class `ldes:EventStream` is a subclass of `tree:Collection`. The specialization being that all members are immutable, and thus that this `tree:Collection` is append-only.

## ldes:timestampPath ## {#voc-timestamppath}

The path to the `xsd:dateTime` literal in each member that defines the order of the event stream.

**Domain:** `ldes:EventStream` or `ldes:RetentionPolicy`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)

## ldes:versionOfPath ## {#voc-versionofpath}

The path to the IRI in each member that defines the entity of which this member is a version.

**Domain:** `ldes:EventStream` or `ldes:RetentionPolicy`

**Range:** a [SHACL property path](https://www.w3.org/TR/shacl/#property-paths)

## ldes:EventSource ## {#voc-eventsource}

The class `ldes:EventSource` is a subclass of `dcat:Distribution`, the specialization being that this is a feed that uses a chronological search tree to make available a Linked Data Event Stream in order.

An `ldes:EventSource` can *only* be published on LDESs that have a `ldes:timestampPath` set, and thus will publish their entities in order.

## ldes:retentionPolicy ## {#voc-retentionpolicyproperty}

Links to a retention policy.

**Domain:** Preferably the root node. Alternatively it can occur on any type of entity that is linked from the root node using `tree:viewDescription`.

**Range:** `ldes:RetentionPolicy`

## ldes:RetentionPolicy ## {#voc-retentionpolicy}

The class for a retention policy that indicates how long members are preserved in this search tree.

### ldes:startingFrom ### {#voc-startingfrom}

The search tree only keeps members starting a certain timestamp.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:dateTime` with a timezone

### ldes:versionDuration ### {#voc-versionduration}

The search tree only keeps its versions, for which an `ldes:versionAmount` MUST have been set, only during a specific window. 

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`

### ldes:versionAmount ### {#voc-versionamount}

The number of versions to keep. This MUST be a number greater than 0.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:integer` > 0

### ldes:versionDeleteDuration ### {#voc-versiondeleteduration}

The search tree only keeps its deletions for a certain duration.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`

### ldes:fullLogDuration ### {#voc-fulllogduration}

The search tree keeps its full log for a certain duration.

**Domain:** `ldes:RetentionPolicy`

**Range:** `xsd:duration`
